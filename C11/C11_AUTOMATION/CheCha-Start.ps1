<# ============================================================
  CheCha-Start.ps1 ‚Äî —É–ª—å—Ç—Ä–∞-—è—Ä–ª–∏–∫ —Å—Ç–∞—Ä—Ç—É —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
  –î—ñ—ó:
    1) –°—Ç–∞—Ä—Ç-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É C03\LOG\start_session_*.log
    2) –ó–∞–ø—É—Å–∫ Checha-RunAll.ps1 -UpdatePanel
    3) –í—ñ–¥–∫—Ä–∏—Ç—Ç—è CONTROL_PANEL.md —É VS Code (–∞–±–æ Notepad)
    4) –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–µ–∫–∏ C06_FOCUS —É –ü—Ä–æ–≤—ñ–¥–Ω–∏–∫—É
    5) –í–∏–≤—ñ–¥ –ø—ñ–¥—Å—É–º–∫—É —ñ (–æ–ø—Ü.) –ø–∞—É–∑–∞ (—è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ .bat)
============================================================ #>

[CmdletBinding()]
param(
  [switch]$NoExplorer,        # –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ —Ç–µ–∫—É C06_FOCUS
  [switch]$NoLogs,            # –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ª–æ–≥
  [switch]$NoVSCode,          # –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ —É VS Code (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Notepad)
  [switch]$PauseAtEnd         # –∑—Ä–æ–±–∏—Ç–∏ –ø–∞—É–∑—É –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ (–∑—Ä—É—á–Ω–æ –¥–ª—è .bat)
)

$ErrorActionPreference = 'Stop'
$root     = "C:\CHECHA_CORE"
$runAll   = Join-Path $root "C11\C11_AUTOMATION\Checha-RunAll.ps1"
$panel    = Join-Path $root "C06_FOCUS\CONTROL_PANEL.md"
$logDir   = Join-Path $root "C03\LOG"
$iconsDir = Join-Path $root "C06_FOCUS\icons"

# 1) –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
if (-not (Test-Path $logDir)) { New-Item -ItemType Directory -Path $logDir -Force | Out-Null }
$tsPath = Join-Path $logDir ("start_session_{0:yyyyMMdd_HHmmss}.log" -f (Get-Date))
try { Start-Transcript -Path $tsPath -Append | Out-Null } catch {}

$sw = [System.Diagnostics.Stopwatch]::StartNew()
$hadErr = $false

Write-Host "‚Üí CheCha Start ‚Äî —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è..." -ForegroundColor Cyan

# 2) RunAll
try {
  if (-not (Test-Path $runAll)) { throw "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Checha-RunAll.ps1: $runAll" }
  & $runAll -UpdatePanel -StatusTake 8
  if ($LASTEXITCODE -ne 0) { throw "RunAll exited code $LASTEXITCODE" }
  Write-Host "‚úì RunAll: OK" -ForegroundColor Green
} catch {
  $hadErr = $true
  Write-Warning "RunAll ERR: $($_.Exception.Message)"
}

# 3) –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å
try {
  if (-not (Test-Path $panel)) {
    # —è–∫—â–æ —Ñ–∞–π–ª–∞ —â–µ –Ω–µ–º–∞ ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ –æ–Ω–æ–≤–∏–º–æ
    $dir = Split-Path $panel -Parent
    if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }
    @'
# üõ† –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è ‚Äî v1.0
–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {{DATE}}
–°—Ç–∞—Ç—É—Å: {{STATUS_BADGE}}

## 1. üîç –°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º–∏
- Health-check: {{AUTO:desktop_health}}
- –û—Å—Ç–∞–Ω–Ω—ñ–π –ª–æ–≥: {{AUTO:last_log}}
- –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {{AUTO:alerts}}
- –û—Å—Ç–∞–Ω–Ω—î RunAll: {{AUTO:last_runall}}
'@ | Set-Content -Path $panel -Encoding UTF8
    # —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏
    $upd = Join-Path $root "C11\C11_AUTOMATION\tools\Update-ControlPanel.ps1"
    if (Test-Path $upd) { & $upd | Out-Null }
  }

  # –∑–Ω–∞–π–¥–µ–º–æ VS Code
  $codeExe = $null
  $candidates = @(
    "$env:LOCALAPPDATA\Programs\Microsoft VS Code\Code.exe",
    "C:\Program Files\Microsoft VS Code\Code.exe",
    "C:\Program Files (x86)\Microsoft VS Code\Code.exe"
  )
  foreach ($c in $candidates) { if (Test-Path $c) { $codeExe = $c; break } }
  if (-not $NoVSCode -and $codeExe) {
    Start-Process -FilePath $codeExe -ArgumentList "`"$panel`""
    Write-Host "‚úì –í—ñ–¥–∫—Ä–∏—Ç–æ —É VS Code: $panel" -ForegroundColor Green
  } else {
    Start-Process notepad.exe "`"$panel`""
    Write-Host "‚ÑπÔ∏è VS Code –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–æ —É Notepad" -ForegroundColor Yellow
  }
} catch {
  $hadErr = $true
  Write-Warning "OPEN PANEL ERR: $($_.Exception.Message)"
}

# 4) –ü—Ä–æ–≤—ñ–¥–Ω–∏–∫ —ñ –ª–æ–≥
try {
  if (-not $NoExplorer) {
    Start-Process explorer.exe "`"$($root)\C06_FOCUS`""
  }
  if (-not $NoLogs) {
    $lastRunAll = Get-ChildItem $logDir -Filter "run_all_*.log" -ErrorAction SilentlyContinue |
      Sort-Object LastWriteTime -Desc | Select-Object -First 1
    if ($lastRunAll) {
      Write-Host "üßæ –û—Å—Ç–∞–Ω–Ω—ñ–π –ª–æ–≥: $($lastRunAll.FullName)" -ForegroundColor DarkCyan
    }
  }
} catch {
  Write-Warning "OPEN EXPLORER/LOG ERR: $($_.Exception.Message)"
}

$sw.Stop()
Write-Host ("‚è± –ì–æ—Ç–æ–≤–æ –∑–∞ {0:N1}s" -f $sw.Elapsed.TotalSeconds) -ForegroundColor Cyan
if ($hadErr) { Write-Host "‚ö†Ô∏è –Ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è/–ø–æ–º–∏–ª–∫–∏ ‚Äî –¥–∏–≤–∏—Å—å –ª–æ–≥: $tsPath" -ForegroundColor Yellow }
else { Write-Host "‚úÖ –£—Å–µ –∑–µ–ª–µ–Ω–æ" -ForegroundColor Green }

try { Stop-Transcript | Out-Null } catch {}

if ($PauseAtEnd) { Write-Host ""; Read-Host "–ù–∞—Ç–∏—Å–Ω–∏ Enter, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏" | Out-Null }
