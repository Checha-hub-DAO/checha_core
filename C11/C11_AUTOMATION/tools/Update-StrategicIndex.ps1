<#  Update-StrategicIndex.ps1
    –î–æ–¥–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π —Ñ–∞–π–ª —É C12\Vault\StrategicReports\_index.md
    –ü—ñ–¥—Ç—Ä–∏–º—É—î 2 –º–∞–∫–µ—Ç–∏ —Ç–∞–±–ª–∏—Ü—å:
      A) | –î–∞—Ç–∞ | –§–∞–π–ª | SHA-256 (—è–∫—â–æ —î) |
      B) | –î–∞—Ç–∞ | –§–∞–π–ª | –û–ø–∏—Å |
#>

[CmdletBinding()]
param(
  # –ö–æ—Ä—ñ–Ω—å Vault —ñ–∑ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–º–∏ –∑–≤—ñ—Ç–∞–º–∏
  [string]$VaultRoot = "C:\CHECHA_CORE\C12\Vault\StrategicReports",
  # –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É (–∑–≤—ñ—Ç/–∫–∞–ª–µ–Ω–¥–∞—Ä)
  [Parameter(Mandatory)]
  [string]$FilePath,
  # –ù–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ: –ª—é–¥–∏–Ω–æ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π –æ–ø–∏—Å (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –∑ "–û–ø–∏—Å")
  [string]$Description = "",
  # –ù–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ: –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM –∞–±–æ YYYY-MM-DD).
  # –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –¥–∞—Ç–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É –∞–±–æ –∑ LastWriteTime.
  [string]$DateOverride
)

function Get-RelPath([string]$base, [string]$full) {
  $uriBase = New-Object System.Uri(($base.TrimEnd('\') + '\'))
  $uriFull = New-Object System.Uri($full)
  $rel = $uriBase.MakeRelativeUri($uriFull).ToString()
  return $rel -replace '%20',' '
}

function Get-StrategicDate([string]$file, [string]$override) {
  if ($override) { return $override }

  $name = [System.IO.Path]::GetFileName($file)

  # –°–ø—Ä–æ–±–∞: YYYY-MM-DD
  if ($name -match '(20\d{2})[-_\.](0[1-9]|1[0-2])[-_\.]([0-3]\d)') {
    return "$($matches[1])-$($matches[2])-$($matches[3])"
  }
  # –°–ø—Ä–æ–±–∞: YYYY-MM
  if ($name -match '(20\d{2})[-_\.](0[1-9]|1[0-2])') {
    return "$($matches[1])-$($matches[2])"
  }
  # –§–æ–ª–±–µ–∫: –¥–∞—Ç–∞ –∑–º—ñ–Ω —Ñ–∞–π–ª—É
  return (Get-Item $file).LastWriteTime.ToString('yyyy-MM-dd')
}

function Get-FileSha256([string]$path) {
  try {
    (Get-FileHash -Algorithm SHA256 -Path $path).Hash
  } catch {
    ""
  }
}

# --- –ì–æ—Ç—É—î–º–æ —à–ª—è—Ö–∏
$indexPath = Join-Path $VaultRoot "_index.md"
if (-not (Test-Path $indexPath)) {
  # –Ø–∫—â–æ —ñ–Ω–¥–µ–∫—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —à–∞–ø–∫—É –∑ –æ–±–æ–º–∞ —Å–µ–∫—Ü—ñ—è–º–∏
  @"
# üìö Strategic Reports ‚Äî Vault
–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: $(Get-Date -Format 'yyyy-MM-dd HH:mm')

## –û—Å—Ç–∞–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ (SHA)
| –î–∞—Ç–∞ | –§–∞–π–ª | SHA-256 (—è–∫—â–æ —î) |
|---|---|---|

## –û—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
| –î–∞—Ç–∞ | –§–∞–π–ª | –û–ø–∏—Å |
|---|---|---|
"@ | Set-Content -Encoding UTF8 -Path $indexPath
}

# --- –ß–∏—Ç–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å
$content = Get-Content -Path $indexPath -Raw -Encoding UTF8

# –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—É —Ç–∞–±–ª–∏—Ü—é –æ–±–Ω–æ–≤–ª—è—Ç–∏ ‚Äî –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é —Å–µ–∫—Ü—ñ–π
$hasShaTable   = $content -match '\| *–î–∞—Ç–∞ *\| *–§–∞–π–ª *\| *SHA-256'
$hasDescTable  = $content -match '\| *–î–∞—Ç–∞ *\| *–§–∞–π–ª *\| *–û–ø–∏—Å *\|'

# –Ø–∫—â–æ –∂–æ–¥–Ω–æ—ó ‚Äî –¥–æ–¥–∞—î–º–æ –æ–±–∏–¥–≤—ñ
if (-not $hasShaTable -and -not $hasDescTable) {
  $content += @"

## –û—Å—Ç–∞–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ (SHA)
| –î–∞—Ç–∞ | –§–∞–π–ª | SHA-256 (—è–∫—â–æ —î) |
|---|---|---|

## –û—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
| –î–∞—Ç–∞ | –§–∞–π–ª | –û–ø–∏—Å |
|---|---|---|
"@
  $hasShaTable = $true
  $hasDescTable = $true
}

# --- –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ñ–∞–π–ª
if (-not (Test-Path $FilePath)) {
  throw "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $FilePath"
}

$rel = Get-RelPath -base $VaultRoot -full $FilePath
$fname = [IO.Path]::GetFileName($FilePath)
$date  = Get-StrategicDate -file $FilePath -override $DateOverride
$hash  = Get-FileSha256 -path $FilePath

# –†—è–¥–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
$lineSha  = "| $date | [$fname]($rel) | $hash |"
$lineDesc = "| $date | [$fname]($rel) | $Description |"

# --- –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: —è–∫—â–æ –∑–∞–ø–∏—Å —É–∂–µ —î ‚Äî –Ω–µ –¥—É–±–ª—é—î–º–æ
if ($content -match [regex]::Escape("[$fname]($rel)")) {
  # –û–Ω–æ–≤–∏—Ç–∏ –ª–∏—à–µ '–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'
  $content = $content -replace '(–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:\s*)(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2})', "`${1}$(Get-Date -Format 'yyyy-MM-dd HH:mm')"
  $content | Set-Content -Encoding UTF8 -Path $indexPath
  Write-Host "‚ö†Ô∏è –í —ñ–Ω–¥–µ–∫—Å—ñ –≤–∂–µ —î –∑–∞–ø–∏—Å –¥–ª—è $fname ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ (–æ–Ω–æ–≤–ª–µ–Ω–æ timestamp)."
  exit 0
}

# --- –í—Å—Ç–∞–≤–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
function Insert-IntoTable([string]$text, [string]$tableHeaderPattern, [string]$row) {
  # –í—Å—Ç–∞–≤–∏–º–æ —Ä—è–¥–æ–∫ –≤—ñ–¥—Ä–∞–∑—É –ü–Ü–°–õ–Ø –ª—ñ–Ω—ñ—ó –∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞–º–∏ |---|---|---|
  $pattern = "($tableHeaderPattern\s*\r?\n\|---\|---\|.*?\|\r?\n)"
  $regex = [regex]::new($pattern, 'Singleline')
  if ($regex.IsMatch($text)) {
    $m = $regex.Match($text)
    $insertionPoint = $m.Index + $m.Length
    return $text.Insert($insertionPoint, $row + "`r`n")
  }
  # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî –¥–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –≤ –∫—ñ–Ω–µ—Ü—å
  return $text + "`r`n" + $tableHeaderPattern + "`r`n|---|---|---|`r`n" + $row + "`r`n"
}

if ($hasShaTable) {
  $content = Insert-IntoTable -text $content `
    -tableHeaderPattern '## –û—Å—Ç–∞–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ \(SHA\)\s*\r?\n\| –î–∞—Ç–∞ \| –§–∞–π–ª \| SHA-256 \(—è–∫—â–æ —î\) \|' `
    -row $lineSha
}
if ($hasDescTable) {
  $content = Insert-IntoTable -text $content `
    -tableHeaderPattern '## –û—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏\s*\r?\n\| –î–∞—Ç–∞ \| –§–∞–π–ª \| –û–ø–∏—Å \|' `
    -row $lineDesc
}

# –û–Ω–æ–≤–ª—é—î–º–æ —à—Ç–∞–º–ø —á–∞—Å—É
$content = $content -replace '(–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:\s*)(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2})', "`${1}$(Get-Date -Format 'yyyy-MM-dd HH:mm')"

# –ó–∞–ø–∏—Å
$content | Set-Content -Encoding UTF8 -Path $indexPath
Write-Host "‚úÖ –î–æ–¥–∞–Ω–æ —É _index.md: $fname"
