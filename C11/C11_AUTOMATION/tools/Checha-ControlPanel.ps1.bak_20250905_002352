<# =======================================================================
  CheCha CONTROL PANEL вЂ” Interactive Console Menu
  Author: РЎ.Р§. (CheCha)
  Path:   C:\CHECHA_CORE\C11\C11_AUTOMATION\tools\Checha-ControlPanel.ps1
  Requires: PowerShell 7+
======================================================================= #>

#requires -Version 7.0

param(
  [string]$ChechaRoot = "C:\CHECHA_CORE",
  [switch]$Force
)

[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$ErrorActionPreference = "Stop"
$script:Force = [bool]$Force

# --- Paths ---------------------------------------------------------------
$Paths = [ordered]@{
  Root                = $ChechaRoot
  C03_Log             = Join-Path $ChechaRoot "C03\LOG"
  RhythmDash          = Join-Path $ChechaRoot "RHYTHM_DASHBOARD.md"
  RunAll              = Join-Path $ChechaRoot "C11\C11_AUTOMATION\Checha-RunAll.ps1"
  Pipelines           = Join-Path $ChechaRoot "C11\C11_AUTOMATION\Run-ChechaPipelines.ps1"
  PanelContext        = Join-Path $ChechaRoot "C11\C11_AUTOMATION\tools\Add-CheChaContext.ps1"
  VaultDashScript     = Join-Path $ChechaRoot "C11\C11_AUTOMATION\tools\Update-VaultDashboard.ps1"
  ShelvesConfig       = Join-Path $ChechaRoot "C11\C11_AUTOMATION\config\checha_shelves.json"
  VaultRoot           = Join-Path $ChechaRoot "C12\Vault"
  StrategAgentDir     = Join-Path $ChechaRoot "C11\C11_AUTOMATION\AGENTS\G44_STRATEG"
  VerifyRelease       = Join-Path $ChechaRoot "tools\verify_release_assets.ps1"
  CheckRelease        = Join-Path $ChechaRoot "tools\check_release.ps1"
  Protocols           = Join-Path $ChechaRoot "C12\Protocols"
  ControlPanelMD      = Join-Path $ChechaRoot "C06_FOCUS\CONTROL_PANEL.md"
  # G04
  G04Dir              = Join-Path $ChechaRoot "C11\C11_AUTOMATION\G04"
  G04Escalation       = Join-Path $ChechaRoot "C11\C11_AUTOMATION\G04\Handle-G04-Escalation.ps1"
  # Incidents
  IncidentsRoot       = Join-Path $ChechaRoot "C12\Vault\Incidents"
  # Strategic Reports
  StrategicReadme     = Join-Path $ChechaRoot "C12\Vault\StrategicReports\README.md"
  StrategicIndex      = Join-Path $ChechaRoot "C12\Vault\StrategicReports\_index.md"
  # Icons
  ShortcutIconDefault = Join-Path $ChechaRoot "C11\C11_AUTOMATION\tools\assets\checha_dao.ico"
}

# --- Transcript ----------------------------------------------------------
try{
  if(-not (Test-Path $Paths.C03_Log)){ New-Item -ItemType Directory -Path $Paths.C03_Log | Out-Null }
  $global:__ChechaTranscript = Join-Path $Paths.C03_Log ("control_panel_{0}.log" -f (Get-Date -Format "yyyyMMdd_HHmmss"))
  Start-Transcript -Path $global:__ChechaTranscript -Append -ErrorAction SilentlyContinue | Out-Null
} catch {}

# --- Tasks & Agents maps -------------------------------------------------
$Tasks = @{
  GitSync       = "ChechaGitSync"
  StrategWeekly = "Checha-Agent-Strateg-Weekly"
}
$Agents = [ordered]@{
  "G44 Strategic (task)"   = @{ Type="task";   Name=$Tasks.StrategWeekly }
  "G04 Coordination dir"   = @{ Type="open";   Path=(Join-Path $ChechaRoot "C11\C11_AUTOMATION\AGENTS\G04_COORD") }
  "G11 Leadership dir"     = @{ Type="open";   Path=(Join-Path $ChechaRoot "C11\C11_AUTOMATION\AGENTS\G11_LEAD") }
  "G04 Escalation (script)"= @{ Type="script"; Path=$Paths.G04Escalation }
}

# --- Panel state ---------------------------------------------------------
$StatePath = Join-Path $ChechaRoot "C11\C11_AUTOMATION\state\panel_state.json"
function Get-State(){ if(Test-Path $StatePath){ try{ Get-Content $StatePath -Raw | ConvertFrom-Json }catch{ [pscustomobject]@{} } } else { [pscustomobject]@{} } }
function Save-State($obj){
  $dir = Split-Path $StatePath -Parent
  if(-not (Test-Path $dir)){ New-Item -ItemType Directory -Path $dir | Out-Null }
  ($obj | ConvertTo-Json -Depth 6) | Set-Content -Path $StatePath -Encoding UTF8
}
function Prompt-Tag([string]$hint){
  $st = Get-State
  $def = $st.lastTag
  if($def){ Write-Host "[i] РћСЃС‚Р°РЅРЅС–Р№ С‚РµРі: $def" -ForegroundColor DarkGray }
  $tag = Read-Host $hint
  if([string]::IsNullOrWhiteSpace($tag)){ return $null }
  $st.lastTag = $tag; Save-State $st
  return $tag
}

# --- Helpers -------------------------------------------------------------
function Write-Info($m){ Write-Host "[i] $m" -ForegroundColor Cyan }
function Write-Ok($m){ Write-Host "[OK] $m" -ForegroundColor Green }
function Write-Warn($m){ Write-Host "[WARN] $m" -ForegroundColor Yellow }
function Write-Err($m){ Write-Host "[ERR] $m" -ForegroundColor Red }

function Assert-File([string]$p){ if(-not (Test-Path $p -PathType Leaf)){ throw "РќРµ Р·РЅР°Р№РґРµРЅРѕ С„Р°Р№Р»: $p" } }
function Assert-Dir([string]$p){ if(-not (Test-Path $p -PathType Container)){ throw "РќРµ Р·РЅР°Р№РґРµРЅРѕ С‚РµРєСѓ: $p" } }

function Open-Path([string]$p){
  if(Test-Path $p){ try{ Start-Process $p | Out-Null }catch{ Write-Warn "РќРµ РІРґР°Р»РѕСЃСЏ РІС–РґРєСЂРёС‚Рё: $p вЂ” $($_.Exception.Message)" } }
  else{ Write-Warn "РЁР»СЏС… РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $p" }
}

function Tail-LastLog([int]$Lines=60){
  Assert-Dir $Paths.C03_Log
  $last = Get-ChildItem $Paths.C03_Log -File | Sort-Object LastWriteTime -Desc | Select-Object -First 1
  if($last){
    Write-Info "Р›РѕРі: $($last.FullName)"
    Get-Content $last.FullName -Tail $Lines
  } else { Write-Warn "Р›РѕРіРё РІС–РґСЃСѓС‚РЅС– РІ $($Paths.C03_Log)" }
}

function Run-PS([string]$ScriptPath, [hashtable]$Args){
  Assert-File $ScriptPath
  $sb = { param($sp, $argsHash) & $sp @argsHash; if($LASTEXITCODE -ne $null -and $LASTEXITCODE -ne 0){ throw "ExitCode=$LASTEXITCODE" } }
  & pwsh -NoProfile -ExecutionPolicy Bypass -Command $sb -Args $ScriptPath, $Args
  Write-Ok "РљРѕРјР°РЅРґР° РІРёРєРѕРЅР°РЅР°."
}

function Exists-Task([string]$name){ $null = & schtasks /Query /TN $name 2>$null; return ($LASTEXITCODE -eq 0) }
function Run-Task([string]$name){
  if(-not (Exists-Task $name)){ Write-Err "Р-Р°РґР°С‡Р° РЅРµ Р·РЅР°Р№РґРµРЅР°: $name"; return }
  try{ Write-Info "Р-Р°РїСѓСЃРєР°СЋ РїР»Р°РЅСѓРІР°Р»СЊРЅРёРє: $name"; & schtasks /Run /TN $name | Out-Null; Write-Ok "РЎРїСЂРѕР±РѕРІР°РЅРѕ Р·Р°РїСѓСЃС‚РёС‚Рё '$name'." }catch{ Write-Err "РџРѕРјРёР»РєР°: $($_.Exception.Message)" }
}

function Backup-File([string]$p){ if(Test-Path $p){ $bak="$p.bak_"+(Get-Date -Format "yyyyMMddHHmmss"); Copy-Item $p $bak -ErrorAction SilentlyContinue } }

function Update-ControlPanelDate(){
  if(-not (Test-Path $Paths.ControlPanelMD)){ Write-Warn "CONTROL_PANEL.md РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $($Paths.ControlPanelMD)"; return }
  $content = Get-Content $Paths.ControlPanelMD -Raw
  $ts = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
  $updated = $content -replace 'РћРЅРѕРІР»РµРЅРѕ:\s*\{\{DATE\}\}', "РћРЅРѕРІР»РµРЅРѕ: $ts"
  if($updated -ne $content){
    Backup-File $Paths.ControlPanelMD
    $updated | Set-Content -Path $Paths.ControlPanelMD -Encoding UTF8
    Write-Ok "РћРЅРѕРІР»РµРЅРѕ РґР°С‚Сѓ РІ CONTROL_PANEL.md ($ts)."
  } else { Write-Info "РџРѕР»Рµ {{DATE}} РЅРµ Р·РЅР°Р№РґРµРЅРѕ вЂ” РїСЂРѕРїСѓС‰РµРЅРѕ." }
}

function Toggle-Force(){ $script:Force = -not $script:Force; Write-Host ("Force={0}" -f ($(if($script:Force){"ON"}else{"off"}))) -ForegroundColor ($(if($script:Force){"Green"}else{"Yellow"})) }

function Normalize-Severity([string]$sev){ $s=($sev ?? "").ToLower().Trim(); if(@("low","medium","high")-contains $s){$s}else{"medium"} }
function YamlEscape([string]$s){ if($null -eq $s){return ""}; return ($s -replace '"','\"') }

# --- Strategic README/INDEX ---------------------------------------------
function Update-StrategicReadmeTimestamp([string]$Path){
  $stamp = "РћСЃС‚Р°РЅРЅС” РѕРЅРѕРІР»РµРЅРЅСЏ: " + (Get-Date -Format "yyyy-MM-dd HH:mm")
  if(-not (Test-Path $Path)){
    "# рџ“љ Strategic Reports вЂ” Vault`n$stamp`n" | Set-Content -Path $Path -Encoding UTF8
    return
  }
  $lines = Get-Content $Path
  $headerIdx = ($lines | Select-String -SimpleMatch "# рџ“љ Strategic Reports вЂ” Vault" | Select-Object -First 1).LineNumber
  $stampIdx  = ($lines | Select-String -SimpleMatch "РћСЃС‚Р°РЅРЅС” РѕРЅРѕРІР»РµРЅРЅСЏ:" | Select-Object -First 1).LineNumber
  if(-not $headerIdx){
    $lines = @("# рџ“љ Strategic Reports вЂ” Vault",$stamp) + $lines
  } elseif($stampIdx){ $lines[$stampIdx-1] = $stamp }
  Backup-File $Path
  $lines | Set-Content -Path $Path -Encoding UTF8
}
function Add-IncidentToStrategicReadme([string]$IncidentId,[string]$Severity,[string]$IncidentPath,[string]$CreatedIso){
  $readmePath = $Paths.StrategicReadme
  $readmeDir  = Split-Path $readmePath -Parent
  if(-not (Test-Path $readmeDir)){ New-Item -ItemType Directory -Path $readmeDir | Out-Null }
  $dateStr = $CreatedIso.Split(' ')[0]
  $rel = [System.IO.Path]::GetRelativePath($readmeDir, $IncidentPath) -replace '\\','/'
  $sectionHeader='## РћСЃС‚Р°РЅРЅС– С–РЅС†РёРґРµРЅС‚Рё'; $tableHeader='| Р”Р°С‚Р° | Р†РЅС†РёРґРµРЅС‚ | Severity |'; $tableSeparator='|---|---|---|'
  $newRow="| $dateStr | [$IncidentId]($rel) | $Severity |"
  if(-not (Test-Path $readmePath)){
    $content=@"
# рџ“љ Strategic Reports вЂ” Vault
РћСЃС‚Р°РЅРЅС” РѕРЅРѕРІР»РµРЅРЅСЏ: $(Get-Date -Format "yyyy-MM-dd HH:mm")

$sectionHeader
$tableHeader
$tableSeparator
$newRow
"@
    Backup-File $readmePath
    $content | Set-Content -Path $readmePath -Encoding UTF8
    Update-StrategicReadmeTimestamp -Path $readmePath
    Write-Ok "РЎС‚РІРѕСЂРµРЅРѕ README С‚Р° РґРѕРґР°РЅРѕ С–РЅС†РёРґРµРЅС‚."
    return
  }
  $lines = Get-Content $readmePath
  $idxHeader = ($lines | Select-String -SimpleMatch $sectionHeader | Select-Object -First 1)
  if(-not $idxHeader){
    Backup-File $readmePath
    "`n$sectionHeader`n$tableHeader`n$tableSeparator`n$newRow`n" | Add-Content -Path $readmePath -Encoding UTF8
    Update-StrategicReadmeTimestamp -Path $readmePath
    Write-Ok "Р”РѕРґР°РЅРѕ СЃРµРєС†С–СЋ В«РћСЃС‚Р°РЅРЅС– С–РЅС†РёРґРµРЅС‚РёВ» С– СЂСЏРґРѕРє."
    return
  }
  $iHeader = $idxHeader.LineNumber - 1; $iSeparator=($iHeader+2)
  $insertIndex = $iSeparator + 1
  $updated=@()
  if($insertIndex -gt 0){ $updated += $lines[0..($insertIndex-1)] }
  $updated += $newRow
  if($lines.Count -gt ($insertIndex)){ $updated += $lines[$insertIndex..($lines.Count-1)] }
  Backup-File $readmePath
  $updated | Set-Content -Path $readmePath -Encoding UTF8
  Update-StrategicReadmeTimestamp -Path $readmePath
  Write-Ok "Р”РѕРґР°РЅРѕ С–РЅС†РёРґРµРЅС‚ Сѓ README (top)."
}
function Update-StrategicIndex([int]$Count=20){
  $indexPath = $Paths.StrategicIndex
  $indexDir  = Split-Path $indexPath -Parent
  if(-not (Test-Path $indexDir)){ New-Item -ItemType Directory -Path $indexDir | Out-Null }
  $incRoot   = $Paths.IncidentsRoot
  if(-not (Test-Path $incRoot)){
    Backup-File $indexPath
    "# рџ“‡ Strategic Reports Index`nРћСЃС‚Р°РЅРЅС” РѕРЅРѕРІР»РµРЅРЅСЏ: $(Get-Date -Format "yyyy-MM-dd HH:mm")`n`n(Р†РЅС†РёРґРµРЅС‚Рё С‰Рµ РЅРµ СЃС‚РІРѕСЂРµРЅС–.)`n" | Set-Content -Path $indexPath -Encoding UTF8
    Write-Warn "IncidentsRoot РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $incRoot вЂ” СЃС‚РІРѕСЂРµРЅРѕ РїРѕСЂРѕР¶РЅС–Р№ С–РЅРґРµРєСЃ."
    return
  }
  $all = Get-ChildItem $incRoot -Recurse -File -Filter "*.md" | Sort-Object LastWriteTime -Desc | Select-Object -First $Count
  $nowStamp = (Get-Date -Format "yyyy-MM-dd HH:mm")
  $lines = @("# рџ“‡ Strategic Reports Index","РћСЃС‚Р°РЅРЅС” РѕРЅРѕРІР»РµРЅРЅСЏ: $nowStamp","","## РћСЃС‚Р°РЅРЅС– С–РЅС†РёРґРµРЅС‚Рё ($($all.Count))","")
  foreach($f in $all){
    $rel = [System.IO.Path]::GetRelativePath($indexDir, $f.FullName) -replace '\\','/'
    $id=$null;$sev=$null;$title=$null;$created=$f.LastWriteTime.ToString("yyyy-MM-dd")
    try{
      $raw = Get-Content $f.FullName -Raw
      if($raw -match "(?s)^---(.*?)---"){
        $yaml=$Matches[1]
        if($yaml -match "id:\s*""?([^""\r\n]+)""?"){ $id=$Matches[1].Trim() }
        if($yaml -match "severity:\s*""?([^""\r\n]+)""?"){ $sev=$Matches[1].Trim() }
        if($yaml -match "title:\s*""?([^""\r\n]+)""?"){ $title=$Matches[1].Trim() }
        if($yaml -match "created:\s*""?([^""\r\n]+)""?"){ $created=($Matches[1].Split(' ')[0]).Trim() }
      }
    }catch{}
    if(-not $id){ $id=[System.IO.Path]::GetFileNameWithoutExtension($f.Name) }
    if(-not $sev){ $sev="medium" }
    if(-not $title){ $title=$id }
    $lines += ("- {0} вЂ” [{1}]({2}) вЂ” **{3}**" -f $created,$id,$rel,$sev)
  }
  Backup-File $indexPath
  $lines | Set-Content -Path $indexPath -Encoding UTF8
  Write-Ok "РћРЅРѕРІР»РµРЅРѕ С–РЅРґРµРєСЃ: $indexPath"
}

# --- Shortcut Icon helpers ----------------------------------------------
function Get-IconPath(){
  $st = Get-State
  if($st.iconPath -and (Test-Path $st.iconPath -PathType Leaf)){ return $st.iconPath }
  if(Test-Path $Paths.ShortcutIconDefault -PathType Leaf){ return $Paths.ShortcutIconDefault }
  return $null
}
function Set-IconPath([string]$path){
  $st = Get-State
  if([string]::IsNullOrWhiteSpace($path)){ $st.iconPath=$null; Save-State $st; Write-Ok "Р†РєРѕРЅРєСѓ РѕС‡РёС‰РµРЅРѕ."; return }
  if(-not (Test-Path $path -PathType Leaf)){ Write-Err "Р¤Р°Р№Р» РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $path"; return }
  if([IO.Path]::GetExtension($path).ToLower() -ne ".ico"){ Write-Err "РћС‡С–РєСѓС”С‚СЊСЃСЏ .ico: $path"; return }
  $st.iconPath=(Resolve-Path $path).Path; Save-State $st; Write-Ok "Р†РєРѕРЅРєСѓ Р·Р±РµСЂРµР¶РµРЅРѕ: $($st.iconPath)"
}
function Action-SetShortcutIcon(){
  Write-Host "Р’РєР°Р¶Рё С€Р»СЏС… РґРѕ .ico Р°Р±Рѕ Enter РґР»СЏ РґРµС„РѕР»С‚Р°; 'clear' вЂ” РїСЂРёР±СЂР°С‚Рё С–РєРѕРЅРєСѓ." -ForegroundColor Cyan
  Write-Host "  " $Paths.ShortcutIconDefault -ForegroundColor DarkGray
  $inp = Read-Host "Icon path [.ico] / Enter / clear"
  if([string]::IsNullOrWhiteSpace($inp)){
    if(Test-Path $Paths.ShortcutIconDefault -PathType Leaf){ Set-IconPath $Paths.ShortcutIconDefault } else { Write-Warn "Р”РµС„РѕР»С‚РЅРѕС- .ico РЅРµРјР°С”." }
  } elseif($inp.Trim().ToLower() -eq "clear"){ Set-IconPath $null }
  else { Set-IconPath $inp }
}

# --- PS 5.1 STA helpers --------------------------------------------------
function Ensure-PS5Path(){ $ps5=Join-Path $env:WINDIR "System32\WindowsPowerShell\v1.0\powershell.exe"; if(-not (Test-Path $ps5 -PathType Leaf)){ throw "РќРµ Р·РЅР°Р№РґРµРЅРѕ Windows PowerShell 5.1: $ps5" }; $ps5 }
function New-ShortcutSTA {
  param([Parameter(Mandatory)][string]$Path,[Parameter(Mandatory)][string]$Target,[Parameter(Mandatory)][string]$WorkDir,[string]$Icon)
  $PS5 = Ensure-PS5Path
  $tmp = Join-Path $env:TEMP ("mklnk_{0}.ps1" -f ([guid]::NewGuid().ToString('N')))
  @'
param([string]$Path,[string]$Target,[string]$WorkDir,[string]$Icon)
$ErrorActionPreference='Stop'
$shell = New-Object -ComObject WScript.Shell
$dir = Split-Path $Path -Parent
if(-not (Test-Path $dir)){ New-Item -ItemType Directory -Path $dir -Force | Out-Null }
if(Test-Path $Path){
  try{ (Get-Item $Path).Attributes = 'Normal' }catch{}
  try{ Remove-Item $Path -Force -ErrorAction SilentlyContinue }catch{}
}
$lnk = $shell.CreateShortcut($Path)
$lnk.TargetPath       = $Target
$lnk.Arguments        = ""
$lnk.WorkingDirectory = $WorkDir
$lnk.WindowStyle      = 1
if($Icon -and (Test-Path $Icon)){ $lnk.IconLocation = "$Icon, 0" }
$lnk.Save()
if(-not (Test-Path $Path)){ throw "Save() completed but file not found: $Path" }
try{ (Get-Item $Path).Attributes = 'ReadOnly' }catch{}
try{ attrib +P $Path 2>$null }catch{}
'@ | Set-Content -Path $tmp -Encoding UTF8
  & $PS5 -STA -NoProfile -File $tmp -Path $Path -Target $Target -WorkDir $WorkDir -Icon $Icon | Out-Null
  $code=$LASTEXITCODE
  Remove-Item $tmp -Force -ErrorAction SilentlyContinue
  if(-not (Test-Path $Path)){ throw "Failed to create shortcut: $Path (exit $code)" }
}

# --- Actions -------------------------------------------------------------
function Action-RunAll(){ $args=@{}; if($script:Force){$args["Force"]=$true}; Run-PS $Paths.RunAll $args }
function Action-RunPipelines(){ $args=@{}; if($script:Force){$args["Force"]=$true}; if(Test-Path $Paths.ShelvesConfig){ $args["ConfigPath"]=$Paths.ShelvesConfig }; Run-PS $Paths.Pipelines $args }
function Action-UpdateVaultDashboard(){ Run-PS $Paths.VaultDashScript @{} }
function Action-OpenDashboards(){ Open-Path $Paths.RhythmDash; Action-UpdateVaultDashboard }
function Action-GitSync(){ Run-Task $Tasks.GitSync }
function Action-StrategicAgent(){
  if(Test-Path $Paths.StrategAgentDir){ Run-Task $Tasks.StrategWeekly; Open-Path (Join-Path $Paths.StrategAgentDir "reports") }
  else { Write-Warn "Р”РёСЂРµРєС‚РѕСЂС–СЏ Р°РіРµРЅС‚Р° РЅРµ Р·РЅР°Р№РґРµРЅР°: $($Paths.StrategAgentDir)" }
}

# --- 16) Shortcut Hardening / Auto-Restore -------------------------------
function Action-ShortcutHardening(){
  $toolsDir   = Join-Path $ChechaRoot "C11\C11_AUTOMATION\tools"
  $panelPs1   = Join-Path $toolsDir "Checha-ControlPanel.ps1"
  $launcher   = Join-Path $toolsDir "Checha-ControlPanel.cmd"
  $fixPs1     = Join-Path $toolsDir "Fix-ChechaShortcut.ps1"
  $autoCmd    = Join-Path $toolsDir "Run-ChechaShortcutAutoRestore.cmd"
  $masterLnk  = Join-Path $toolsDir "CheCha CONTROL PANEL.master.lnk"
  $icon       = Get-IconPath
  if(-not (Test-Path $panelPs1 -PathType Leaf)){ Write-Err "РќРµ Р·РЅР°Р№РґРµРЅРѕ РїР°РЅРµР»СЊ: $panelPs1"; return }

  # 1) .cmd-Р»Р°РЅС‡РµСЂ
  "@echo off`r`npushd ""$toolsDir""`r`nstart """" ""$((Get-Command pwsh).Source)"" -NoProfile -ExecutionPolicy Bypass -File ""$panelPs1""`r`npopd`r`n" |
    Set-Content -Path $launcher -Encoding ASCII
  try{ attrib +P $launcher 2>$null }catch{}

  # 2) Р•С‚Р°Р»РѕРЅРЅРёР№ СЏСЂР»РёРє (STA)
  try{ New-ShortcutSTA -Path $masterLnk -Target $launcher -WorkDir $toolsDir -Icon $icon; Write-Ok "Р•С‚Р°Р»РѕРЅРЅРёР№ СЏСЂР»РёРє СЃС‚РІРѕСЂРµРЅРѕ: $masterLnk" }
  catch { Write-Err "РќРµ РІРґР°Р»РѕСЃСЏ СЃС‚РІРѕСЂРёС‚Рё РµС‚Р°Р»РѕРЅРЅРёР№ СЏСЂР»РёРє: $($_.Exception.Message)"; return }

  # 3) РЎРєСЂРёРїС‚ Р°РІС‚Рѕ-РІС–РґРЅРѕРІР»РµРЅРЅСЏ Р· Р»РѕРіСѓРІР°РЅРЅСЏРј
  $restoreContent = @"
Start-Sleep -Seconds 5
`$ErrorActionPreference="SilentlyContinue"
`$ToolsDir   = "$toolsDir"
`$ChechaRoot = "$ChechaRoot"
`$MasterLnk  = Join-Path `$ToolsDir "CheCha CONTROL PANEL.master.lnk"
`$Targets = @(
  (Join-Path `$env:APPDATA 'Microsoft\Windows\Start Menu\Programs\CheCha CONTROL PANEL.lnk'),
  (Join-Path `$env:Public  'Desktop\CheCha CONTROL PANEL.lnk')
)
`$logDir = Join-Path `$ChechaRoot "C03\LOG"
if(-not (Test-Path `$logDir)){ New-Item -ItemType Directory -Path `$logDir | Out-Null }
`$logFile = Join-Path `$logDir "shortcut_restore.log"
"`$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') START restore" | Out-File -FilePath `$logFile -Append -Encoding utf8
foreach(`$t in `$Targets){
  try{
    Copy-Item `$MasterLnk `$t -Force
    try{ (Get-Item `$t).Attributes = 'ReadOnly' }catch{}
    try{ attrib +P `$t 2>`$null }catch{}
    "`$(Get-Date -Format 'HH:mm:ss') OK   `$t" | Out-File -FilePath `$logFile -Append -Encoding utf8
  }catch{
    "`$(Get-Date -Format 'HH:mm:ss') ERR  `$t вЂ” $($_.Exception.Message)" | Out-File -FilePath `$logFile -Append -Encoding utf8
  }
}
"@
  $restoreContent | Set-Content -Path $fixPs1 -Encoding UTF8
  try{ attrib +P $fixPs1 2>$null }catch{}
  try{ attrib +P $masterLnk 2>$null }catch{}
  if($icon){ try{ attrib +P $icon 2>$null }catch{} }

  # 4) Task Scheduler Р· 20СЃ Р·Р°С‚СЂРёРјРєРѕСЋ (fallback Сѓ Startup)
  $taskName = "ChechaShortcutAutoRestore"
  $pwsh = (Get-Command pwsh).Source
  $createdByTask = $false
  try{
    schtasks /Delete /TN $taskName /F 2>$null | Out-Null
    $out = schtasks /Create /SC ONLOGON /TN $taskName /TR "`"$pwsh`" -NoProfile -ExecutionPolicy Bypass -File `"$fixPs1`"" /RL LIMITED /DELAY 0000:20 /F 2>&1
    if($LASTEXITCODE -eq 0){ $createdByTask=$true; Write-Ok "Auto-restore С‡РµСЂРµР· Task Scheduler СЃС‚РІРѕСЂРµРЅРѕ (Р·Р°С‚СЂРёРјРєР° 20СЃ)." }
    else { Write-Warn ("Task Scheduler: РєРѕРґ $LASTEXITCODE вЂ” РІРёРєРѕСЂРёСЃС‚РѕРІСѓСЋ Startup fallback. " + ($out -join " ")) }
  } catch { Write-Warn "Task Scheduler РЅРµРґРѕСЃС‚СѓРїРЅРёР№ вЂ” РІРёРєРѕСЂРёСЃС‚РѕРІСѓСЋ Startup fallback. Р”РµС‚Р°Р»С–: $($_.Exception.Message)" }

  if(-not $createdByTask){
    "@echo off
""$pwsh"" -NoProfile -ExecutionPolicy Bypass -File ""$fixPs1""
" | Set-Content -Path $autoCmd -Encoding ASCII
    try{ attrib +P $autoCmd 2>$null }catch{}
    $startup = Join-Path $env:APPDATA 'Microsoft\Windows\Start Menu\Programs\Startup'
    if(-not (Test-Path $startup)){ New-Item -ItemType Directory -Path $startup -Force | Out-Null }
    try{
      Copy-Item $autoCmd (Join-Path $startup (Split-Path $autoCmd -Leaf)) -Force
      try{ attrib +P (Join-Path $startup (Split-Path $autoCmd -Leaf)) 2>$null }catch{}
      Write-Ok "Auto-restore С‡РµСЂРµР· Startup РЅР°Р»Р°С€С‚РѕРІР°РЅРѕ: $startup"
    } catch {
      Write-Warn "РќРµ РІРґР°Р»РѕСЃСЏ Р·Р°РїРёСЃР°С‚Рё РІ Startup (РјРѕР¶Р»РёРІРѕ, Controlled Folder Access). Р”РµС‚Р°Р»С–: $($_.Exception.Message)"
    }
  }

  # 5) Р Р°Р·РѕРІРёР№ Р·Р°РїСѓСЃРє + РїС–РґРєР°Р·РєР° РїСЂРѕ Р»РѕРі
  & pwsh -NoProfile -ExecutionPolicy Bypass -File $fixPs1
  Write-Ok "Shortcut hardening Р·Р°РІРµСЂС€РµРЅРѕ. Р›РѕРі: $(Join-Path $ChechaRoot 'C03\LOG\shortcut_restore.log')"
  Write-Info "РЇСЂР»РёРєРё: User Start Menu + Public Desktop (СЏРєС‰Рѕ РґРѕСЃС‚СѓРїРЅРѕ)."
}

# --- 17) Set Shortcut Icon ----------------------------------------------
# (РІРёРєРѕСЂРёСЃС‚РѕРІСѓС” Action-SetShortcutIcon С‚Р° Set-IconPath РІРёС‰Рµ)

# --- 18) Shortcut Restore Log (view/tail/clear) -------------------------
function Get-ShortcutLogPath(){
  $logDir = Join-Path $ChechaRoot "C03\LOG"
  if(-not (Test-Path $logDir)){ New-Item -ItemType Directory -Path $logDir | Out-Null }
  return (Join-Path $logDir "shortcut_restore.log")
}
function Action-OpenShortcutLog(){
  $log = Get-ShortcutLogPath
  if(-not (Test-Path $log)){ "" | Set-Content $log -Encoding UTF8 }
  try{ Start-Process notepad $log | Out-Null; Write-Ok "Р’С–РґРєСЂРёРІ Р»РѕРі Сѓ Notepad." }catch{ Write-Err "РќРµ РІРґР°Р»РѕСЃСЏ РІС–РґРєСЂРёС‚Рё Р»РѕРі: $($_.Exception.Message)" }
}
function Action-TailShortcutLog(){
  $log = Get-ShortcutLogPath
  if(-not (Test-Path $log)){ "" | Set-Content $log -Encoding UTF8 }
  Write-Info "РЎС‚РµР¶РµРЅРЅСЏ Р·Р° Р»РѕРіРѕРј. РќР°С‚РёСЃРЅРё Ctrl+C, С‰РѕР± РІРёР№С‚Рё."
  Get-Content $log -Wait
}
function Action-ClearShortcutLog(){
  $log = Get-ShortcutLogPath
  try{ "" | Set-Content $log -Encoding UTF8; Write-Ok "Р›РѕРі РѕС‡РёС‰РµРЅРѕ: $log" }catch{ Write-Err "РџРѕРјРёР»РєР° РѕС‡РёС‰РµРЅРЅСЏ: $($_.Exception.Message)" }
}
function Action-ShortcutLogMenu(){
  Write-Host "18.1) Open in Notepad"
  Write-Host "18.2) Tail (live view)"
  Write-Host "18.3) Clear log"
  Write-Host "0) Back"
  $s = Read-Host "Р’РёР±С–СЂ"
  switch($s){
    '1' { Action-OpenShortcutLog }
    '2' { Action-TailShortcutLog }
    '3' { Action-ClearShortcutLog }
    default { return }
  }
}

# --- Menu UI -------------------------------------------------------------
function Show-Header(){
  Clear-Host
  Write-Host ""
  Write-Host "==================== рџ›° CheCha CONTROL PANEL ====================" -ForegroundColor Magenta
  Write-Host ("  Root: {0}" -f $ChechaRoot) -ForegroundColor DarkGray
  Write-Host ("  Time: {0}" -f (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")) -ForegroundColor DarkGray
  Write-Host ("  Force: {0}" -f ($(if($script:Force){"ON"}else{"off"}))) -ForegroundColor DarkGray
  Write-Host "=================================================================" -ForegroundColor Magenta
  Write-Host ""
}
function Show-Menu(){
  Write-Host "1) Dashboards                     6) Verify Release"
  Write-Host "2) RunAll (РїР°Р№РїР»Р°Р№РЅРё)             7) Check Release"
  Write-Host "3) Pipelines (Р·Р° РєРѕРЅС„С–РіРѕРј)        8) Vault / Protocols"
  Write-Host "4) GitSync (Scheduled Task)       9) Logs / Tail last"
  Write-Host "5) Strategic Agent (G44)         10) Install/Update Context Menu"
  Write-Host "-----------------------------------------------------------------"
  Write-Host "11) Update CONTROL_PANEL.md date  12) Open Last Strategic Report"
  Write-Host "13) G04 Escalation                14) Create Incident Note"
  Write-Host "15) Rebuild Strategic Index (_index.md)   16) Shortcut Hardening / Auto-Restore"
  Write-Host "17) Set Shortcut Icon (.ico)      18) Shortcut Restore Log (view/tail/clear)"
  Write-Host "A) Agents quick menu   D) Dashboards   L) Tail last log   F) Toggle Force   E) G04 Escalation   I) Incident Note   T) Rebuild Index   Y) Shortcut Hardening   O) Set Icon   V) View Shortcut Log   0) Exit"
  Write-Host ""
}

function Main-Loop(){
  do{
    Show-Header
    Show-Menu
    $choice = Read-Host "Р’РёР±С–СЂ"
    try{
      switch($choice){
        '1'  { Action-OpenDashboards }
        '2'  { Action-RunAll }
        '3'  { Action-RunPipelines }
        '4'  { Action-GitSync }
        '5'  { Action-StrategicAgent }
        '6'  { Action-VerifyRelease }
        '7'  { Action-CheckRelease }
        '8'  {
          Write-Host "8.1) Р’С–РґРєСЂРёС‚Рё Vault"
          Write-Host "8.2) Р’С–РґРєСЂРёС‚Рё Protocols"
          Write-Host "8.3) Р’С–РґРєСЂРёС‚Рё Incidents"
          $s = Read-Host "Р’РёР±С–СЂ"
          if($s -eq '1'){ Open-Path $Paths.VaultRoot }
          elseif($s -eq '2'){ Open-Path $Paths.Protocols }
          elseif($s -eq '3'){ Open-Path $Paths.IncidentsRoot }
        }
        '9'  {
          Write-Host "9.1) Р’С–РґРєСЂРёС‚Рё С‚РµРєСѓ LOG"
          Write-Host "9.2) РџРѕРєР°Р·Р°С‚Рё С…РІС–СЃС‚ РѕСЃС‚Р°РЅРЅСЊРѕРіРѕ Р»РѕРі-С„Р°Р№Р»Сѓ"
          $s = Read-Host "Р’РёР±С–СЂ"
          if($s -eq '1'){ Open-Path $Paths.C03_Log }
          elseif($s -eq '2'){ Tail-LastLog -Lines 80 }
        }
        '10' { Run-PS $Paths.PanelContext @{ Install=$true; IncludeOpenPanel=$true; PwshExe=(Get-Command pwsh).Source; ChechaRoot=$ChechaRoot } }
        '11' { Update-ControlPanelDate }
        '12' { 
          $dir = Join-Path $Paths.VaultRoot "StrategicReports"
          if(-not (Test-Path $dir)){ Write-Warn "РќРµРјР°С” С‚РµРєРё StrategicReports: $dir" }
          else{
            $last = Get-ChildItem $dir -Recurse -File -Filter "Strateg_Report_*.md" | Sort-Object LastWriteTime -Desc | Select-Object -First 1
            if($last){ Start-Process $last.FullName | Out-Null; Write-Ok "Р’С–РґРєСЂРёС‚Рѕ: $($last.Name)" } else { Write-Warn "Р-РІС–С‚С–РІ РЅРµ Р·РЅР°Р№РґРµРЅРѕ Сѓ $dir" }
          }
        }
        '13' { 
          if(-not (Test-Path $Paths.G04Escalation -PathType Leaf)){ Write-Err "РЎРєСЂРёРїС‚ РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $($Paths.G04Escalation)" }
          else{
            Write-Info "РњРѕР¶РµС€ РІРєР°Р·Р°С‚Рё РїР°СЂР°РјРµС‚СЂРё (Enter вЂ” РїСЂРѕРїСѓСЃС‚РёС‚Рё)."
            $incident = Read-Host "IncidentId (РЅРµРѕР±РѕРІ'СЏР·РєРѕРІРѕ)"
            $severity = Normalize-Severity (Read-Host "Severity [low|medium|high] (РЅРµРѕР±РѕРІ'СЏР·РєРѕРІРѕ)")
            $args=@{}; if($incident){$args["IncidentId"]=$incident}; if($severity){$args["Severity"]=$severity}; if($script:Force){$args["Force"]=$true}
            Run-PS $Paths.G04Escalation $args
          }
        }
        '14' {
          $now=Get-Date; $yyy=$now.ToString("yyyy"); $tsId=$now.ToString("yyyyMMdd-HHmmss"); $defaultId="INC-$tsId"
          $dirYear = Join-Path $Paths.IncidentsRoot $yyy
          if(-not (Test-Path $dirYear)){ New-Item -ItemType Directory -Path $dirYear | Out-Null }
          $incident = Read-Host "IncidentId (Enter РґР»СЏ Р°РІС‚Рѕ) [$defaultId]"; if([string]::IsNullOrWhiteSpace($incident)){ $incident=$defaultId }
          $severity = Normalize-Severity (Read-Host "Severity [low|medium|high] (Enter=medium)")
          $title    = Read-Host "РљРѕСЂРѕС‚РєРёР№ Р·Р°РіРѕР»РѕРІРѕРє (1-2 С„СЂР°Р·Рё)"
          $desc     = Read-Host "РћРїРёСЃ (optional)"
          $fileName="INC-$tsId.md"; $pathMd=Join-Path $dirYear $fileName; $author=$env:USERNAME; $isoTime=$now.ToString("yyyy-MM-dd HH:mm:ss")
          $content=@"
---
type: incident
id: "$(YamlEscape $incident)"
title: "$(YamlEscape $title)"
severity: "$(YamlEscape $severity)"
created: "$isoTime"
author: "$(YamlEscape $author)"
status: "open"
links: []
tags: ["G04","escalation"]
---

# $incident вЂ” $title

**Р”Р°С‚Р°/С‡Р°СЃ:** $isoTime  
**РђРІС‚РѕСЂ:** $author  
**Severity:** $severity

## РљРѕСЂРѕС‚РєРёР№ РѕРїРёСЃ
$desc

## Р”С–С- / Р•СЃРєР°Р»Р°С†С–СЏ
- [ ] РџРµСЂРІРёРЅРЅР° РІР°Р»С–РґР°С†С–СЏ
- [ ] РџСЂРёР·РЅР°С‡РёС‚Рё РІС–РґРїРѕРІС–РґР°Р»СЊРЅРѕРіРѕ
- [ ] Р-С–Р±СЂР°С‚Рё Р°СЂС‚РµС„Р°РєС‚Рё (Р»РѕРіРё, СЃРєСЂС–РЅС€РѕС‚Рё, РїРѕСЃРёР»Р°РЅРЅСЏ)
- [ ] РџРѕРІС–РґРѕРјРёС‚Рё СЃС‚РµР№РєС…РѕР»РґРµСЂС–РІ
- [ ] Р-Р°РїСѓСЃС‚РёС‚Рё РµСЃРєР°Р»Р°С†С–СЋ (G04)

## РђСЂС‚РµС„Р°РєС‚Рё
- Р›РѕРіРё: `C03/LOG/...`
- РЎРєСЂРёРїС‚: `C11/C11_AUTOMATION/G04/Handle-G04-Escalation.ps1`

## Р С–С€РµРЅРЅСЏ / РџРѕСЃС‚РјРѕСЂС‚РµРј
- TBD

вњЌпёЏ РЎ.Р§.
"@
          $content | Set-Content -Path $pathMd -Encoding UTF8
          Write-Ok "РќРѕС‚Сѓ С–РЅС†РёРґРµРЅС‚Сѓ СЃС‚РІРѕСЂРµРЅРѕ: $pathMd"
          Start-Process $pathMd | Out-Null
          try{ Add-IncidentToStrategicReadme -IncidentId $incident -Severity $severity -IncidentPath $pathMd -CreatedIso $isoTime; Update-StrategicIndex -Count 20 }catch{ Write-Warn "README/INDEX: $($_.Exception.Message)" }
        }
        '15' { Update-StrategicIndex -Count 20 }
        '16' { Action-ShortcutHardening }
        '17' { Action-SetShortcutIcon }
        '18' { Action-ShortcutLogMenu }
        'A'  { 
          $i=0; $keys=$Agents.Keys
          foreach($k in $keys){ $i++; Write-Host ("{0}) {1}" -f $i, $k) }
          Write-Host "0) Back"
          $sel = Read-Host "Р’РёР±С–СЂ"
          if($sel -eq '0'){ }
          elseif($sel -as [int] -and $sel -ge 1 -and $sel -le $keys.Count){
            $key=$keys[[int]$sel-1]; $cfg=$Agents[$key]
            switch($cfg.Type){
              "task"   { Run-Task $cfg.Name }
              "open"   { Open-Path $cfg.Path }
              "script" { if(Test-Path $cfg.Path -PathType Leaf){ & $cfg.Path } else { Write-Err "РЎРєСЂРёРїС‚ РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $($cfg.Path)" } }
              default  { Write-Warn "РќРµРІС–РґРѕРјРёР№ С‚РёРї Р°РіРµРЅС‚Р°: $($cfg.Type)" }
            }
          } else { Write-Warn "РќРµРІС–СЂРЅРёР№ РІРёР±С–СЂ: $sel" }
        }
        'D' { Action-OpenDashboards }
        'L' { Tail-LastLog -Lines 80 }
        'F' { Toggle-Force }
        'E' { 
          if(Test-Path $Paths.G04Escalation -PathType Leaf){
            $incident = Read-Host "IncidentId (РЅРµРѕР±РѕРІ'СЏР·РєРѕРІРѕ)"
            $severity = Normalize-Severity (Read-Host "Severity [low|medium|high] (РЅРµРѕР±РѕРІ'СЏР·РєРѕРІРѕ)")
            $args=@{}; if($incident){$args["IncidentId"]=$incident}; if($severity){$args["Severity"]=$severity}; if($script:Force){$args["Force"]=$true}
            Run-PS $Paths.G04Escalation $args
          } else { Write-Err "РЎРєСЂРёРїС‚ РЅРµ Р·РЅР°Р№РґРµРЅРѕ: $($Paths.G04Escalation)" }
        }
        'I' { 
          # Alias РґРѕ 14
          $choice='14'; continue
        }
        'T' { Update-StrategicIndex -Count 20 }
        'Y' { Action-ShortcutHardening }
        'O' { Action-SetShortcutIcon }
        'V' { Action-OpenShortcutLog }
        '0' { break }
        default { Write-Warn "РќРµРІС–РґРѕРјРёР№ РІРёР±С–СЂ: $choice" }
      }
    } catch { Write-Err $_.Exception.Message }
    if($choice -ne '0'){ Write-Host ""; Read-Host "РќР°С‚РёСЃРЅРё Enter, С‰РѕР± РїСЂРѕРґРѕРІР¶РёС‚Рё" | Out-Null }
  } while ($true)
}

# --- Startup diagnostics -------------------------------------------------
try{ Assert-Dir $Paths.Root; Write-Ok "CHECHA_ROOT OK: $($Paths.Root)" } catch { Write-Err $_.Exception.Message; try{ Stop-Transcript | Out-Null }catch{}; exit 1 }

Main-Loop

try{ Stop-Transcript | Out-Null } catch {}

