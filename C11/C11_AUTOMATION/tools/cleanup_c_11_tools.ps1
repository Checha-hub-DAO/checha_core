<#
.SYNOPSIS
  –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∞ —á–∏—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É C11\tools (—ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è, –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –æ–ø—Ü—ñ–π–Ω–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤, —ñ–Ω–¥–µ–∫—Å).
.DESCRIPTION
  –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ *.ps1 —É C11\tools, –≥—Ä—É–ø—É—î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–¥–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (v2, fixed2, final, bak, test, copy, draft),
  –∑–∞–ª–∏—à–∞—î –æ–¥–∏–Ω ¬´–æ—Å–Ω–æ–≤–Ω–∏–π¬ª –≤–∞—Ä—ñ–∞–Ω—Ç (–±–µ–∑ —Å—É—Ñ—ñ–∫—Å—ñ–≤, –∞–±–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π), —Ä–µ—à—Ç—É –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —É –∞—Ä—Ö—ñ–≤ —ñ –ø–∞–∫—É—î —É ZIP –∑ SHA256.
  –¢–∞–∫–æ–∂ –≥–µ–Ω–µ—Ä—É—î TOOLS_INDEX.md –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º —Ç–∞ –ª–æ–≥ –¥—ñ–π —É C03\LOG\cleanup_tools.log.
.NOTES
  PowerShell 7+. –ü—ñ–¥—Ç—Ä–∏–º—É—î -WhatIf / -Confirm. –ó–∞–ø—É—Å–∫ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ Root.
.PARAMETER Root
  –ö–æ—Ä—ñ–Ω—å CHECHA_CORE (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º C:\CHECHA_CORE).
.PARAMETER ToolsRel
  –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º C11\tools).
.PARAMETER ArchiveRel
  –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É –∞—Ä—Ö—ñ–≤—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º C05\ARCHIVE).
.PARAMETER DryRun
  –õ–∏—à–µ –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ, –±–µ–∑ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å —Ç–∞ –∑–º—ñ–Ω.
.PARAMETER NormalizeNames
  –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ ¬´–æ—Å–Ω–æ–≤–Ω—ñ¬ª —Å–∫—Ä–∏–ø—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É (–æ–±–µ—Ä–µ–∂–Ω–æ, –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ).
.EXAMPLE
  pwsh -NoProfile -File .\Cleanup-C11-Tools.ps1 -Root 'D:\CHECHA_CORE' -WhatIf
.EXAMPLE
  pwsh -NoProfile -File .\Cleanup-C11-Tools.ps1 -Root 'D:\CHECHA_CORE' -NormalizeNames -Confirm:$false
#>
[CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
Param(
  [string]$Root = 'C:\CHECHA_CORE',
  [string]$ToolsRel = 'C11\tools',
  [string]$ArchiveRel = 'C05\ARCHIVE',
  [switch]$DryRun,
  [switch]$NormalizeNames
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function New-DirIfMissing([string]$Path){ if(-not (Test-Path $Path)){ New-Item -ItemType Directory -Path $Path | Out-Null } }
function Write-Log([string]$Path,[string]$Level,[string]$Msg){
  $ts = (Get-Date).ToString('yyyy-MM-dd HH:mm:ss')
  Add-Content -Path $Path -Value "$ts [$Level] $Msg"
}

# --- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–ª—è—Ö—ñ–≤ ---
$tools = Join-Path $Root $ToolsRel
$archiveRoot = Join-Path $Root $ArchiveRel
$logDir = Join-Path $Root 'C03\LOG'
New-DirIfMissing $tools
New-DirIfMissing $archiveRoot
New-DirIfMissing $logDir
$logPath = Join-Path $logDir 'cleanup_tools.log'

$stamp = Get-Date -Format 'yyyyMMdd_HHmmss'
$sessionDir = Join-Path $archiveRoot ("scripts_cleanup_" + $stamp)
$sessionMoveDir = Join-Path $sessionDir 'old_variants'
$zipPath = Join-Path $sessionDir ("scripts_" + $stamp + '.zip')
$checksumsPath = Join-Path $sessionDir 'CHECKSUMS.txt'

# --- –ü—Ä–∞–≤–∏–ª–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–æ–≤–∏—Ö —ñ–º–µ–Ω ---
# –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ —Å—É—Ñ—ñ–∫—Å–∏ —Ç–∞ –º–∞—Ä–∫–µ—Ä–∏ –∫–æ–ø—ñ–π/—á–µ—Ä–Ω–µ—Ç–æ–∫
$SuffixPatterns = @(
  '(?i)[-_\. ]?(?:v\d+(?:\.\d+)*)',
  '(?i)[-_\. ]?fixed\d*',
  '(?i)[-_\. ]?final',
  '(?i)[-_\. ]?backup|bak',
  '(?i)[-_\. ]?copy( \(\d+\))?',
  '(?i)[-_\. ]?draft',
  '(?i)[-_\. ]?test',
  '(?i)\s*-\s*–∫–æ–ø–∏—è( \(\d+\))?'
)

function Get-BaseStem([string]$FileName){
  $stem = [System.IO.Path]::GetFileNameWithoutExtension($FileName)
  foreach($re in $SuffixPatterns){ $stem = [regex]::Replace($stem, $re, '') }
  $stem = $stem -replace '[ _]+','-'
  $stem = $stem.Trim('-_ .')
  if([string]::IsNullOrWhiteSpace($stem)){ $stem = [System.IO.Path]::GetFileNameWithoutExtension($FileName) }
  return $stem
}

function Propose-NormalName([System.IO.FileInfo]$File){
  $stem = Get-BaseStem $File.Name
  $ext = $File.Extension
  return "$stem$ext"
}

# --- –Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è ---
$all = Get-ChildItem -Path $tools -Filter '*.ps1' -File -ErrorAction Stop
if(-not $all){ Write-Log $logPath 'INFO' "–ù–µ–º–∞—î *.ps1 —É $tools"; return }

# –ì—Ä—É–ø—É—î–º–æ –∑–∞ –±–∞–∑–æ–≤–∏–º —Å—Ç–æ–≤–±—É—Ä–æ–º (–ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—É—Ñ—ñ–∫—Å—ñ–≤)
$groups = $all | Group-Object { Get-BaseStem $_.Name } | Sort-Object Name

Write-Log $logPath 'INFO' "–ü–æ—á–∞—Ç–æ–∫ —á–∏—Å—Ç–∫–∏ C11\\tools ($($all.Count) —Ñ–∞–π–ª—ñ–≤, –≥—Ä—É–ø: $($groups.Count))"

$toArchive = New-Object System.Collections.Generic.List[System.IO.FileInfo]
$keepers = New-Object System.Collections.Generic.List[System.IO.FileInfo]

foreach($g in $groups){
  $files = $g.Group | Sort-Object LastWriteTime -Descending
  # –í–∏–±—ñ—Ä ¬´–æ—Å–Ω–æ–≤–Ω–æ–≥–æ¬ª: 1) –ë–µ–∑ —Å—É—Ñ—ñ–∫—Å—ñ–≤ > 2) –ù–∞–π—Å–≤—ñ–∂—ñ—à–∏–π
  $preferred = $files | Where-Object {
    $proposed = Propose-NormalName $_
    # –Ø–∫—â–æ –≤–∂–µ —É –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ ‚Äî –≤–≤–∞–∂–∞—î–º–æ ¬´–±–µ–∑ —Å—É—Ñ—ñ–∫—Å—ñ–≤¬ª
    $proposed -eq $_.Name
  } | Sort-Object LastWriteTime -Descending | Select-Object -First 1
  if(-not $preferred){ $preferred = $files | Select-Object -First 1 }

  $keepers.Add($preferred)
  foreach($f in $files){ if($f.FullName -ne $preferred.FullName){ $toArchive.Add($f) } }
}

# --- –ü–æ–∫–∞–∑ –ø–ª–∞–Ω—É –¥—ñ–π ---
Write-Host "–ë—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω—ñ:" -ForegroundColor Cyan
$keepers | ForEach-Object { Write-Host "  + $($_.Name)" }
Write-Host "\n–ë—É–¥—É—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –≤ –∞—Ä—Ö—ñ–≤ (–≤–∞—Ä—ñ–∞–Ω—Ç–∏):" -ForegroundColor Yellow
$toArchive | ForEach-Object { Write-Host "  - $($_.Name)" }

if($DryRun){ Write-Log $logPath 'INFO' "DryRun: –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω"; return }

# --- –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —É –∞—Ä—Ö—ñ–≤ ---
New-DirIfMissing $sessionMoveDir
if($toArchive.Count -gt 0){
  foreach($f in $toArchive){
    $dest = Join-Path $sessionMoveDir $f.Name
    if($PSCmdlet.ShouldProcess($f.FullName, "Move -> $dest")){
      Move-Item -Path $f.FullName -Destination $dest -Force
      Write-Log $logPath 'INFO' "MOVE $($f.Name) -> $dest"
    }
  }
}

# --- –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–∑–≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö (–æ–ø—Ü—ñ–π–Ω–æ) ---
if($NormalizeNames){
  foreach($k in $keepers){
    $proposed = Propose-NormalName $k
    if($proposed -ne $k.Name){
      $target = Join-Path $k.DirectoryName $proposed
      if(Test-Path $target){
        # —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É: –¥–æ–¥–∞—Ç–∏ —Ç–∞–π–º-–º—ñ—Ç–∫—É
        $target = Join-Path $k.DirectoryName ("{0}_{1}{2}" -f [System.IO.Path]::GetFileNameWithoutExtension($proposed), $stamp, [System.IO.Path]::GetExtension($proposed))
      }
      if($PSCmdlet.ShouldProcess($k.FullName, "Rename -> $target")){
        Rename-Item -Path $k.FullName -NewName ([System.IO.Path]::GetFileName($target)) -Force
        Write-Log $logPath 'INFO' "RENAME $($k.Name) -> $(Split-Path $target -Leaf)"
      }
    }
  }
}

# --- –ü–∞–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É + SHA256 ---
if( (Get-ChildItem -Path $sessionMoveDir -File | Measure-Object).Count -gt 0 ){
  if($PSCmdlet.ShouldProcess($sessionMoveDir, "Compress -> $zipPath")){
    Compress-Archive -Path (Join-Path $sessionMoveDir '*') -DestinationPath $zipPath -Force
    $hash = (Get-FileHash -Path $zipPath -Algorithm SHA256).Hash
    Set-Content -Path $checksumsPath -Value ("SHA256  {0}  {1}" -f $hash, (Split-Path $zipPath -Leaf)) -Encoding UTF8
    Write-Log $logPath 'INFO' "ZIP $zipPath; SHA256=$hash"
  }
}

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è TOOLS_INDEX.md ---
$indexPath = Join-Path $tools 'TOOLS_INDEX.md'
$indexLines = @()
$indexLines += "# C11/tools ‚Äî —ñ–Ω–¥–µ–∫—Å —Ä–æ–±–æ—á–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ ($stamp)"
$indexLines += ""
foreach($k in (Get-ChildItem -Path $tools -Filter '*.ps1' -File | Sort-Object Name)){
  $syn = (Select-String -Path $k.FullName -Pattern '^\s*\.SYNOPSIS\s*$' -SimpleMatch -Context 0,3 -ErrorAction SilentlyContinue | ForEach-Object {
    # –ë–µ—Ä–µ–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è .SYNOPSIS —è–∫ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
    if($_.Context.PostContext){ $_.Context.PostContext[0].Trim() } else { $null }
  }) | Select-Object -First 1
  if(-not $syn){ $syn = '(–æ–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)' }
  $indexLines += "- `$(Split-Path $k.Name -Leaf)`: $syn"
}
Set-Content -Path $indexPath -Value ($indexLines -join [Environment]::NewLine) -Encoding UTF8
Write-Log $logPath 'INFO' "INDEX $indexPath –æ–Ω–æ–≤–ª–µ–Ω–æ"

Write-Host "\n‚úÖ –ì–æ—Ç–æ–≤–æ. –î–∏–≤–∏—Å—å –ª–æ–≥: $logPath" -ForegroundColor Green
Write-Host "üì¶ –ê—Ä—Ö—ñ–≤: $sessionDir"
