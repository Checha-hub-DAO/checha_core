<#
.SYNOPSIS
  –§–æ—Ä–º—É—î Markdown-–∑–≤—ñ—Ç –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "—Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∞" –∑–∞ —Ç–∏–∂–¥–µ–Ω—å.

.DESCRIPTION
  –ß–∏—Ç–∞—î C03\LOG\trafficlight.json (schema=trafficlight.v1) —ñ –≥–µ–Ω–µ—Ä—É—î
  —Å—Ç–∏—Å–ª–∏–π –±–ª–æ–∫ –¥–ª—è —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É: —Å–µ—Å—ñ—ó, –≤—á–∞—Å–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏, "—á–µ—Ä–≤–æ–Ω—ñ" –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ—â–æ.

.PARAMETER Root
  –ö–æ—Ä—ñ–Ω—å CHECHA_CORE (default: C:\CHECHA_CORE)

.PARAMETER OutFile
  –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –∑–±–µ—Ä–µ–∂–µ Markdown —É —Ñ–∞–π–ª.

.PARAMETER Quiet
  –ù–µ –¥—Ä—É–∫—É–≤–∞—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—å (–ª–∏—à–µ –∑–∞–ø–∏—Å —É —Ñ–∞–π–ª/exit code).

.OUTPUTS
  –ü–∏—à–µ Markdown —É stdout –∞–±–æ —É —Ñ–∞–π–ª. Exit code: 0 –æ–∫.

.EXAMPLE
  pwsh -NoProfile -File WeeklyTrafficLight-Report.ps1
#>

[CmdletBinding()]
Param(
  [string]$Root = "C:\CHECHA_CORE",
  [string]$OutFile,
  [switch]$Quiet
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Load-JsonSafe {
  param([string]$Path)
  if (-not (Test-Path $Path)) { return $null }
  try { return Get-Content $Path -Raw -Encoding UTF8 | ConvertFrom-Json }
  catch { return $null }
}

function MkLine { param([string]$s); return $s }

$logDir = Join-Path $Root 'C03\LOG'
$json   = Join-Path $logDir 'trafficlight.json'
$data   = Load-JsonSafe $json

if (-not $data) {
  $md = @()
  $md += MkLine("### –°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä (—Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è)")
  $md += MkLine("> –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –§–∞–π–ª `trafficlight.json` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
  $md = $md -join "`r`n"
  if ($OutFile) { $md | Set-Content -Path $OutFile -Encoding UTF8 }
  if (-not $Quiet) { $md | Write-Output }
  exit 0
}

# –ë–µ–∑–ø–µ—á–Ω—ñ —á–∏—Ç–∞–Ω–Ω—è
$c = $data.counters
if (-not $c) {
  $data | Add-Member -NotePropertyName counters -NotePropertyValue (@{}) -Force
  $c = $data.counters
}
foreach ($k in 'sessions','ended_green','ended_yellow','ended_red','updates_green','updates_yellow','updates_red','starts_green','starts_yellow','starts_red') {
  if (-not $c.$k) { $c.$k = 0 }
}

$weekKey   = $data.week
$sessions  = [int]$c.sessions
$endedG    = [int]$c.ended_green
$endedY    = [int]$c.ended_yellow
$endedR    = [int]$c.ended_red
$warns     = [int]$c.updates_yellow
$redsUpd   = [int]$c.updates_red

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
$onTimeSwitches   = $endedG + $endedY  # –∑–∞–≤–µ—Ä—à–∏–ª–∏ <= –∂–æ–≤—Ç–æ–≥–æ
$lateRedEntries   = $endedR            # –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É "—á–µ—Ä–≤–æ–Ω—ñ–π"
$yellowShare      = if ($sessions) { [math]::Round(100.0 * $endedY / $sessions, 1) } else { 0 }
$redShare         = if ($sessions) { [math]::Round(100.0 * $endedR / $sessions, 1) } else { 0 }

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
$recs = @()
if ($lateRedEntries -gt 0) {
  $recs += "‚Ä¢ –ó–º–µ–Ω—à–∏—Ç–∏ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —É üî¥: —Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ—Ö—ñ–¥ —â–µ –Ω–∞ üü° (30‚Äì49 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)."
}
if ($warns -gt 2) {
  $recs += "‚Ä¢ –ë—ñ–ª—å—à–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ üü°-–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø–µ—Ä–µ—Ö—ñ–¥ —ñ –ø—Ä–æ–º—ñ–∂–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫."
}
if ($sessions -gt 0 -and $yellowShare -lt 25 -and $redShare -eq 0) {
  $recs += "‚Ä¢ –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ —Ö–æ—Ä–æ—à–∞: —Ç—Ä–∏–º–∞—î–º–æ –±—ñ–ª—å—à—ñ—Å—Ç—å —Å–µ—Å—ñ–π ‚â§ üü°."
}
if ($recs.Count -eq 0) {
  $recs += "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–æ: üü° –Ω–∞ 30-–º—É, üî¥ –Ω–∞ 50-–º—É. –§—ñ–∫—Å—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∫–æ–∂–Ω–æ—ó —Å–µ—Å—ñ—ó."
}

# Markdown
$md = @()
$md += MkLine("### –°–≤—ñ—Ç–ª–æ—Ñ–æ—Ä (—Ç–∏–∂–¥–µ–Ω—å: $weekKey)")
$md += MkLine("")
$md += MkLine("| –ü–æ–∫–∞–∑–Ω–∏–∫ | –ó–Ω–∞—á–µ–Ω–Ω—è |")
$md += MkLine("|---|---:|")
$md += MkLine("| –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π | $sessions |")
$md += MkLine("| –ó–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ üü¢ | $endedG |")
$md += MkLine("| –ó–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ üü° | $endedY |")
$md += MkLine("| –ó–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ üî¥ | $endedR |")
$md += MkLine("| –ß–∞—Å—Ç–∫–∞ üü° —Å–µ—Ä–µ–¥ —Å–µ—Å—ñ–π | ${yellowShare}% |")
$md += MkLine("| –ß–∞—Å—Ç–∫–∞ üî¥ —Å–µ—Ä–µ–¥ —Å–µ—Å—ñ–π | ${redShare}% |")
$md += MkLine("| –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å üü° (Update) | $warns |")
$md += MkLine("| –û–Ω–æ–≤–ª–µ–Ω—å üî¥ (Update) | $redsUpd |")
$md += MkLine("")
$md += MkLine("**–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤—á–∞—Å–Ω–æ** (‚â§ üü°): **$onTimeSwitches** ‚îÇ **–í—Ö–æ–¥–∂–µ–Ω–Ω—è —É üî¥**: **$lateRedEntries**")
$md += MkLine("")
$md += MkLine("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**")
foreach ($r in $recs) { $md += MkLine($r) }

$mdOut = $md -join "`r`n"
if ($OutFile) { $mdOut | Set-Content -Path $OutFile -Encoding UTF8 }
if (-not $Quiet) { $mdOut | Write-Output }

exit 0
