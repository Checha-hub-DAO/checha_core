param(
  [string]$RepoPath = "D:\CHECHA_CORE",
  [string]$Remote   = "origin",
  [string]$Branch   = "main",
  [switch]$NoPush,
  [switch]$SkipStash,
  [switch]$ForcePush,
  [switch]$LogOnly,                  # тільки fetch/rebase + лог/дашборд
  [int]$LogRetentionDays = 14        # автоклінап логів, днів
)

$ErrorActionPreference = "Stop"

# --- logging setup ---
$LogDir = "C:\CHECHA_CORE\C03\LOG"
New-Item -ItemType Directory -Path $LogDir -Force | Out-Null
$ts    = Get-Date -Format "yyyyMMdd_HHmmss"
$Log   = Join-Path $LogDir ("git_sync_{0}.log" -f $ts)
$Dash  = "C:\CHECHA_CORE\RHYTHM_DASHBOARD.md"

# лог-режим завжди без push
if ($LogOnly) { $NoPush = $true }

# автоклінап старих логів/виводів push
try {
  $cutoff = (Get-Date).AddDays(-[math]::Abs($LogRetentionDays))
  Get-ChildItem $LogDir -File -ErrorAction SilentlyContinue |
    Where-Object { $_.LastWriteTime -lt $cutoff -and $_.Name -match '^(git_sync_.*\.log|push_.*\.(out|err))$' } |
    Remove-Item -Force -ErrorAction SilentlyContinue
} catch {}

function Stamp { "[{0}] " -f (Get-Date -Format "yyyy-MM-dd HH:mm:ss") }
function W([string]$msg, [string]$color="Gray") {
  Write-Host $msg -ForegroundColor $color
  Add-Content -Path $Log -Value (Stamp + $msg)
}
function Fail([string]$msg) {
  W ("ERROR: {0}" -f $msg) "Red"
  Add-Content -Path $Dash -Value ("`r`n{0}GIT sync FAILED: {1} <-> {2}/{1} (Repo={3})" -f (Stamp), $Branch, $Remote, $RepoPath)
  exit 1
}

# --- sanity checks ---
if (-not (Test-Path (Join-Path $RepoPath ".git"))) { Fail ("RepoPath is not a git repo: {0} (no .git)" -f $RepoPath) }
$git = (Get-Command git -ErrorAction SilentlyContinue | Select-Object -First 1).Source
if (-not $git) { $git = "C:\Program Files\Git\cmd\git.exe" }
if (-not (Test-Path $git)) { Fail ("git.exe not found: {0}" -f $git) }

# --- begin ---
W ("BEGIN sync Repo={0} Remote={1} Branch={2}" -f $RepoPath, $Remote, $Branch) "White"

# work-tree check (лог лише у файл)
$out = & $git -C $RepoPath rev-parse --is-inside-work-tree 2>&1
Add-Content -Path $Log -Value (Stamp + $out)
if ($LASTEXITCODE -ne 0) { Fail ("not a git work tree: {0}" -f $RepoPath) }

# default pull mode
$out = & $git -C $RepoPath config pull.rebase true 2>&1
Add-Content -Path $Log -Value (Stamp + $out)

# ensure on target branch
$current = (& $git -C $RepoPath rev-parse --abbrev-ref HEAD).Trim()
if ($current -ne $Branch) {
  W ("CHECKOUT {0}" -f $Branch) "Cyan"
  $out = & $git -C $RepoPath checkout $Branch 2>&1
  $out | Tee-Object -FilePath $Log -Append | Out-Host
  if ($LASTEXITCODE -ne 0) { Fail ("checkout {0} failed" -f $Branch) }
}

# stash if dirty
$por = (& $git -C $RepoPath status --porcelain)
$hadStash = $false
if ($por) {
  if ($SkipStash) { Fail "working tree dirty and -SkipStash is set" }
  $name = "pre-rebase " + (Get-Date -Format "yyyyMMdd_HHmmss")
  W ("STASH {0}" -f $name) "Yellow"
  $out = & $git -C $RepoPath stash push -u -m $name 2>&1
  $out | Tee-Object -FilePath $Log -Append | Out-Host
  if ($LASTEXITCODE -ne 0) { Fail "stash failed" }
  $hadStash = $true
}

# fetch
W ("FETCH {0}" -f $Remote) "Cyan"
$out = & $git -C $RepoPath fetch $Remote 2>&1
$out | Tee-Object -FilePath $Log -Append | Out-Host
if ($LASTEXITCODE -ne 0) { Fail "fetch failed" }

# rebase
W ("REBASE {0}/{1}" -f $Remote, $Branch) "Cyan"
$out = & $git -C $RepoPath rebase "$Remote/$Branch" 2>&1
$out | Tee-Object -FilePath $Log -Append | Out-Host
if ($LASTEXITCODE -ne 0) {
  W "Rebase stopped due to conflicts. Resolve, then: git rebase --continue (or --abort)" "Yellow"
  Add-Content -Path $Dash -Value ("`r`n{0}GIT sync PAUSED (conflicts): {1} <-> {2}/{1} (Repo={3})" -f (Stamp), $Branch, $Remote, $RepoPath)
  exit 1
}

# stash pop (if used)
if ($hadStash) {
  W "STASH POP" "Yellow"
  $out = & $git -C $RepoPath stash pop 2>&1
  $out | Tee-Object -FilePath $Log -Append | Out-Host
  if ($LASTEXITCODE -ne 0) {
    W "Conflicts after stash pop. Resolve and commit." "Yellow"
    Add-Content -Path $Dash -Value ("`r`n{0}GIT sync PAUSED (stash-pop conflicts): {1} <-> {2}/{1} (Repo={3})" -f (Stamp), $Branch, $Remote, $RepoPath)
    exit 1
  }
}

# push (optional) — Start-Process, щоб не було NativeCommandError
if (-not $NoPush) {
  $tmpOut = Join-Path $LogDir ("push_{0}.out" -f $ts)
  $tmpErr = Join-Path $LogDir ("push_{0}.err" -f $ts)
  if ($ForcePush) {
    W "PUSH --force-with-lease" "Magenta"
    $p = Start-Process -FilePath $git -ArgumentList @('-C',$RepoPath,'push','--force-with-lease',$Remote,$Branch) -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tmpOut -RedirectStandardError $tmpErr
  } else {
    W "PUSH" "Green"
    $p = Start-Process -FilePath $git -ArgumentList @('-C',$RepoPath,'push',$Remote,$Branch) -NoNewWindow -Wait -PassThru -RedirectStandardOutput $tmpOut -RedirectStandardError $tmpErr
  }
  Get-Content $tmpOut, $tmpErr | Tee-Object -FilePath $Log -Append | Out-Host
  Remove-Item $tmpOut, $tmpErr -ErrorAction SilentlyContinue
  if ($p.ExitCode -ne 0) { Fail ("push failed (exit={0})" -f $p.ExitCode) }
} else {
  W "NoPush: skipping push" "DarkYellow"
}

# summary and dashboard
$head = (& $git -C $RepoPath rev-parse --short HEAD).Trim()
$subj = (& $git -C $RepoPath log -1 --pretty=%s) -replace '\r?\n',' '
$mode = if ($LogOnly) { 'LOGONLY' } else { 'OK' }
Add-Content -Path $Dash -Value ("`r`n{0}GIT sync {5}: {1} <-> {2}/{1} (Repo={3}, HEAD={4}, {6})" -f (Stamp), $Branch, $Remote, $RepoPath, $head, $mode, $subj)

W ("DONE: {0} synced with {1}/{0} (Repo={2})" -f $Branch, $Remote, $RepoPath) "Green"
W ("LOG: {0}" -f $Log) "DarkGray"