[CmdletBinding()]
param(
  [string]$Tag,                         # –Ω–∞–ø—Ä.: c12-docs-v2.1 (—è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ, –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ)
  [string]$Title,                       # –Ω–∞–ø—Ä.: "C12 Docs v2.1 ‚Äî FAQ + Examples" (–¥–µ—Ñ–æ–ª—Ç = "C12 Docs <Tag>")
  [string]$ZipPath,                     # —è–≤–Ω–∏–π —à–ª—è—Ö –¥–æ ZIP (–æ–ø—Ü.)
  [string]$RepoPath = "C:\CHECHA_CORE\repos\ETHNO-releases",
  [string]$NotesPath,                   # —è–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –Ω–æ—Ç–∞—Ç–æ–∫ (–æ–ø—Ü.)
  [switch]$DryRun
)

$ErrorActionPreference = 'Stop'

function Assert-Exe($name) {
  if (-not (Get-Command $name -ErrorAction SilentlyContinue)) {
    throw "Required tool not found: $name"
  }
}
Assert-Exe gh

if (-not (Test-Path $RepoPath)) {
  throw "RepoPath not found: $RepoPath"
}

# 1) ZIP: —è–≤–Ω–∏–π –∞–±–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π —É —Ä–µ–ø–æ
if ($ZipPath) {
  if (-not (Test-Path $ZipPath)) { throw "ZIP not found: $ZipPath" }
  $Zip = Get-Item $ZipPath
} else {
  $Zip = Get-ChildItem -Path $RepoPath -Filter *.zip -File |
         Sort-Object LastWriteTimeUtc -Descending |
         Select-Object -First 1
}

# 2) –¢–µ–≥: —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî –≤–∏–≤–æ–¥–∏–º–æ –∑ —ñ–º–µ–Ω—ñ ZIP; —è–∫—â–æ ZIP –Ω–µ–º–∞ ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ
if (-not $Tag) {
  if ($Zip) {
    $name = $Zip.Name
    if     ($name -match '(?i)c12.*?v([\w\.\-]+)')       { $Tag = "c12-docs-v$($Matches[1])" }
    elseif ($name -match '(?i)c12.*?(\d{8}[_-]?\d{6})')  { $Tag = "c12-docs-$($Matches[1])" }
    else                                                 { $Tag = "c12-docs-$(Get-Date -AsUTC -Format yyyyMMdd_HHmmss)" }
  } else {
    $Tag = "c12-docs-$(Get-Date -AsUTC -Format yyyyMMdd_HHmmss)"
  }
}

# 3) –Ø–∫—â–æ ZIP –¥–æ—Å—ñ –Ω–µ–º–∞ ‚Äî –ó–ë–ò–†–ê–Ñ–ú–û –∑ checha_core/
if (-not $Zip) {
  $src = Join-Path $RepoPath "checha_core"
  if (-not (Test-Path $src)) { throw "checha_core not found at $src ‚Äî –Ω–µ–º–∞ —â–æ –ø–∞–∫—É–≤–∞—Ç–∏." }
  $zipName    = "GitBook_C12_Docs_$($Tag).zip" -replace '[^\w\.\-]','_'
  $zipPathNew = Join-Path $RepoPath $zipName
  Write-Host "üß± Building ZIP from $src -> $zipPathNew ..."
  if (Test-Path $zipPathNew) { Remove-Item $zipPathNew -Force }
  Compress-Archive -Path (Join-Path $src '*') -DestinationPath $zipPathNew -Force
  $Zip = Get-Item $zipPathNew
}

# 4) Title: –¥–µ—Ñ–æ–ª—Ç
if (-not $Title -or [string]::IsNullOrWhiteSpace($Title)) {
  $Title = "C12 Docs $Tag"
}

# 5) CHECKSUMS: —à—É–∫–∞—î–º–æ; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ
$ChecksumsFile = Get-ChildItem $RepoPath -Filter "*$Tag*.txt" -File -ErrorAction SilentlyContinue |
                 Select-Object -First 1
if (-not $ChecksumsFile) {
  $ChecksumPath = Join-Path $RepoPath ("CHECKSUMS_{0}.txt" -f $Tag)
  $sha = (Get-FileHash $Zip.FullName -Algorithm SHA256).Hash
  "$sha  $($Zip.Name)" | Out-File -FilePath $ChecksumPath -Encoding ASCII
  $ChecksumsFile = Get-Item $ChecksumPath
}

# 6) Notes: —è–≤–Ω–∏–π —à–ª—è—Ö –∞–±–æ RELEASE_NOTES_<tag>.md; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
if ($NotesPath) {
  if (-not (Test-Path $NotesPath)) { throw "Notes file not found: $NotesPath" }
} else {
  $NotesPath = Join-Path $RepoPath ("RELEASE_NOTES_{0}.md" -f $Tag)
  if (-not (Test-Path $NotesPath)) {
    @"
# $Title
Manual release of C12 docs.

## Contents
- $($Zip.Name)
- $($ChecksumsFile.Name)

Generated: $(Get-Date -AsUTC -Format 'yyyy-MM-dd HH:mm:ss \U\T\C')
"@ | Set-Content -Path $NotesPath -Encoding UTF8
  }
}

Write-Host "üì¶ Release parameters:" -ForegroundColor Cyan
Write-Host "  Tag:        $Tag"
Write-Host "  Title:      $Title"
Write-Host "  ZIP:        $($Zip.FullName)"
Write-Host "  CHECKSUMS:  $($ChecksumsFile.FullName)"
Write-Host "  NOTES:      $NotesPath"

if ($DryRun) {
  Write-Host "üí° DryRun mode: no changes made to GitHub." -ForegroundColor Yellow
  exit 0
}

# 7) –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É –Ω–∞ GitHub
Push-Location $RepoPath
try {
  if (gh release view $Tag 2>$null) {
    Write-Host "‚ôªÔ∏è Updating existing release..."
    gh release upload $Tag $Zip.FullName $ChecksumsFile.FullName --clobber
    gh release edit $Tag --title "$Title" --notes-file $NotesPath
  } else {
    Write-Host "üöÄ Creating new release..."
    gh release create $Tag `
      $Zip.FullName `
      $ChecksumsFile.FullName `
      $NotesPath `
      --title "$Title" `
      --notes-file $NotesPath
  }
}
finally {
  Pop-Location
}

# 8) –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è README.md ‚Üí "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–ª—ñ–∑" + "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–ª—ñ–∑—ñ–≤ (—Ç–æ–ø-5)"
try {
  $readme = Join-Path $RepoPath "README.md"
  if (Test-Path $readme) {
    $repoSlug = "Checha-hub-DAO/ETHNO-releases"

    # –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –±–ª–æ–∫ "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–ª—ñ–∑"
    $urlLatest = "https://github.com/$repoSlug/releases/tag/$Tag"
    $latestLine = "`n## üÜï –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–ª—ñ–∑`n- [$Title]($urlLatest) ‚Äî $((Get-Date).ToString('yyyy-MM-dd'))`n"

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–ª—ñ–∑–∏ —Ç–∞ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–ª—ñ–∑—ñ–≤ (—Ç–æ–ø-5)"
    $json = gh api "repos/$repoSlug/releases?per_page=10"
    $rels = $json | ConvertFrom-Json
    $top = $rels | Sort-Object { [datetime]($_.published_at ?? $_.created_at) } -Descending | Select-Object -First 5

    $histItems = foreach ($r in $top) {
      $nm = if ([string]::IsNullOrWhiteSpace($r.name)) { $r.tag_name } else { $r.name }
      $dt = [datetime]($r.published_at ?? $r.created_at)
      "- [$nm]($($r.html_url)) ‚Äî $($dt.ToString('yyyy-MM-dd'))"
    }
    $historyBlock = "`n## üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–ª—ñ–∑—ñ–≤ (–æ—Å—Ç–∞–Ω–Ω—ñ 5)`n" + ($histItems -join "`n") + "`n"

    # –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ README —ñ –æ–Ω–æ–≤–∏—Ç–∏/–≤—Å—Ç–∞–≤–∏—Ç–∏ –æ–±–∏–¥–≤—ñ —Å–µ–∫—Ü—ñ—ó
    $content = Get-Content $readme -Raw

    if ($content -match '## üÜï –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–ª—ñ–∑') {
      $content = [regex]::Replace($content, '## üÜï –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–ª—ñ–∑[\s\S]*?(?=\n## |\z)', $latestLine)
    } else {
      $content += $latestLine
    }

    if ($content -match '## üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–ª—ñ–∑—ñ–≤') {
      $content = [regex]::Replace($content, '## üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–ª—ñ–∑—ñ–≤[\s\S]*?(?=\n## |\z)', $historyBlock)
    } else {
      $content += $historyBlock
    }

    $content | Set-Content $readme -Encoding UTF8

    # –ö–æ–º—ñ—Ç —ñ –ø—É—à –∑–º—ñ–Ω README (—è–∫—â–æ —î)
    if (Get-Command git -ErrorAction SilentlyContinue) {
      Push-Location $RepoPath
      try {
        git add README.md | Out-Null
        $staged = (git diff --cached --name-only).Trim()
        if ($staged) {
          git commit -m "docs(repo): –æ–Ω–æ–≤–ª–µ–Ω–æ '–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–ª—ñ–∑' —Ç–∞ '–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–ª—ñ–∑—ñ–≤' ($Tag)" | Out-Null
          git push origin (git rev-parse --abbrev-ref HEAD).Trim() | Out-Null
          Write-Host "üìù README.md –æ–Ω–æ–≤–ª–µ–Ω–æ (–æ—Å—Ç–∞–Ω–Ω—ñ–π + —ñ—Å—Ç–æ—Ä—ñ—è) —Ç–∞ –∑–∞–ø—É—à–µ–Ω–æ."
        } else {
          Write-Host "‚ÑπÔ∏è README.md –±–µ–∑ –∑–º—ñ–Ω (–Ω—ñ—á–æ–≥–æ –∫–æ–º—ñ—Ç–∏—Ç–∏)."
        }
      } finally {
        Pop-Location
      }
    } else {
      Write-Warning "git –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî README –æ–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –∫–æ–º—ñ—Ç—É."
    }
  } else {
    Write-Warning "README.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É $RepoPath ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."
  }
} catch {
  Write-Warning "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ README.md (–æ—Å—Ç–∞–Ω–Ω—ñ–π/—ñ—Å—Ç–æ—Ä—ñ—è): $($_.Exception.Message)"
}

Write-Host "‚úÖ Done."
